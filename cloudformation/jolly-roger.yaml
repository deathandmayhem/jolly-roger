# This YAML file can be used as a CloudFormation Stack to spin up the
# jolly-roger environment. This file is loaded directly into
# CloudFormation, which means that some features of YAML
# (e.g. references) are unavailable.
#
# The jolly-roger environment consists of:
#
# - A VPC with a public subnet
#
# - A system for fetching secrets using credstash which encrypts
#   secrets using KMS and stores them in DynamoDB.
#
# - An auto-scaling group (ASG) with instances that automatically
#   launch the jolly-roger application.
#
# - The application instances run several docker services:
#
#   - An nginx instance for port 80, redirecting to HTTPS and serving
#   - healthchecks for ALB
#
#   - An nginx instance for port 8443, listening for HTTP connections
#     (HTTPS, unwrapped by ALB) and forwarding to the application
#
#   - The actual Meteor application
#
#   - Watchtower, which periodically pulls image updates
#
# - An Application Load Balancer (ALB) in front of the ASG, forwarding
#   ports 80 and 443 to ports 80 and 8443 on application servers. ALB
#   is responsible for terminating TLS (we require websocket support,
#   but ALB has that).
#
# It's possible this could be used to run multiple parallel copies of
# the jolly-roger website, though that's not very likely in practice.
#
# To spin up an independent copy of jolly-roger, you'll _definitely_
# need to do the following (and probably more I've forgotten):
#
# - Setup credstash (following the directions in the repo)
#
# - Store the MongoDB URL using `credstash put mongo @<path>`. The
#   free account from mongolab (for instance) should be sufficient.
#
# - Signup for a Mailgun account (or any mail provider that supports
#   SMTP submission), and add an SMTP URL with the SMTP credentials
#   from your mailgun account. The URL format should be something
#   like:
#
#     smtp://postmaster%40yourdomain.com:smtp-password@smtp.mailgun.org:587
#
#   Store that using `credstash put mailgun @<path>`.

AWSTemplateFormatVersion: "2010-09-09"
Description: jolly-roger

Parameters:
  CredstashKeyUuid:
    Description: UUID of the credstash KMS key
    Type: String
  CertificateArn:
    Description: ARN of the certificate to use
    Type: String
  AppUrl:
    Description: The domain name of application
    Type: String
    Default: future.deathandmayhem.com
  AppDomain:
    Description: The zone under which to create DNS records
    Type: AWS::Route53::HostedZone::Id
  AppInstanceType:
    Description: Instance type to run for app server
    Type: String
    Default: t3a.micro
  AppMinSize:
    Description: Minimum number of instances for app server ASG
    Type: Number
    Default: 1
  AppMaxSize:
    Description: Maximum number of instances for app server ASG
    Type: Number
    Default: 2
  AppDesiredCapacity:
    Description: Desired number of instances for app server ASG
    Type: Number
    Default: 1
  PapertrailHost:
    Description: Log host for Papertrail
    Type: String
    Default: ''
    NoEcho: true

Conditions:
  HavePapertrail: !Not [!Equals [!Ref PapertrailHost, '']]

Resources:

  AMILookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
  AMILookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Look up the latest Ubuntu AMI given specific parameters
      Runtime: nodejs12.x
      Handler: "index.main"
      Timeout: 10
      Role: !GetAtt AMILookupRole.Arn
      Code:
        ZipFile: |
          const assert = require('assert');
          const https = require('https');
          const response = require('cfn-response');

          const getContent = function (url) {
            return new Promise((resolve, reject) => {
              const request = https.get(url, (httpResponse) => {
                if (httpResponse.statusCode < 200 || httpResponse.statusCode > 299) {
                  reject(new Error(`Error loading: ${httpResponse.statusCode}`));
                }
                const body = [];
                httpResponse.on('data', (chunk) => body.push(chunk));
                httpResponse.on('end', () => resolve(body.join('')));
              });
              request.on('error', (err) => reject(err));
            });
          };

          // By promise-ifying this we can block the main function from resolving until this finishes
          const sendResponse = function (event, context, status, data) {
            return new Promise((resolve) => {
              const fakeContext = { ...context, done: resolve };
              response.send(event, fakeContext, status, data);
            });
          };

          exports.main = async (event, context) => {
            try {
              const suite = event.ResourceProperties.Suite;
              const instanceType = event.ResourceProperties.InstanceType;
              const arch = event.ResourceProperties.Architecture;
              const region = event.ResourceProperties.Region;
              const virtType = event.ResourceProperties.VirtualizationType;
              assert(suite && instanceType && arch && region && virtType);

              const raw = await getContent(`https://cloud-images.ubuntu.com/query/${suite}/server/released.current.txt`);
              const data = raw.split('\n').map((l) => l.split('\t'))
                .map((l) => ({
                  suite: l[0],
                  stream: l[1],
                  tag: l[2],
                  serial: l[3],
                  itype: l[4],
                  arch: l[5],
                  region: l[6],
                  ami: l[7],
                  aki: l[8],
                  virttype: l[10],
                }));
              const match = data.find((l) => l.suite === suite &&
                l.itype === instanceType &&
                l.arch === arch &&
                l.region === region &&
                l.virttype === virtType);
              await sendResponse(event, context, response.SUCCESS, { AMI: match.ami });
            } catch (e) {
              await sendResponse(event, context, response.FAILED, { Error: e.message });
            }
          };
  AMILookup:
    Type: Custom::AMILookup
    Properties:
      ServiceToken: !GetAtt AMILookupFunction.Arn
      Suite: focal
      Region: !Ref "AWS::Region"
      InstanceType: ebs-ssd
      Architecture: amd64
      VirtualizationType: hvm

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.32.0.0/16
      EnableDnsHostnames: true

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
    DependsOn: InternetGatewayAttachment

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.32.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.32.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet2

  AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: credstash-download
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/credential-store"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${CredstashKeyUuid}"

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref AppInstanceRole

  AppAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for app load balancer
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - Description: ICMP echo request
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 8
          ToPort: -1
        - Description: ICMP echo reply
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 0
          ToPort: -1
        - Description: ICMP frag needed
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 3
          ToPort: 4
      VpcId: !Ref VPC
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for app server instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref AppAlbSecurityGroup
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
        - Description: Mediasoup RTC ports
          CidrIp: 0.0.0.0/0
          IpProtocol: udp
          FromPort: 10000
          ToPort: 59999
        - Description: Mediasoup RTC ports
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 10000
          ToPort: 59999
        - Description: ICMP echo request
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 8
          ToPort: -1
        - Description: ICMP echo reply
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 0
          ToPort: -1
        - Description: ICMP frag needed
          CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: 3
          ToPort: 4
      VpcId: {Ref: VPC}

  AppAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AppAlbSecurityGroup
  AppAlbTargetHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8443
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Protocol: HTTP
      Port: 8443
      VpcId: !Ref VPC
  AppAlbListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppAlb
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
  AppAlbListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppAlb
      Protocol: HTTPS
      Port: 443
      Certificates:
        - {CertificateArn: !Ref CertificateArn}
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppAlbTargetHTTPS

  AppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref AppInstanceProfile
      ImageId: !GetAtt AMILookup.AMI
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 12
        - DeviceName: /dev/sdb
          VirtualName: ephemeral0
        - DeviceName: /dev/sdc
          VirtualName: ephemeral1
      InstanceType: !Ref AppInstanceType
      SecurityGroups:
        - !Ref AppSecurityGroup
      # We're generating a YAML file inside a YAML file. Yes, this is
      # gross, but it seems to be the best anyone has come up with
      # (especially since we need variable interpolation)
      UserData:
        Fn::Base64:
          !Sub
            - |
              #cloud-config

              package_upgrade: true

              apt:
                sources:
                  docker.list:
                    source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable"
                    key: |
                      -----BEGIN PGP PUBLIC KEY BLOCK-----

                      mQINBFit2ioBEADhWpZ8/wvZ6hUTiXOwQHXMAlaFHcPH9hAtr4F1y2+OYdbtMuth
                      lqqwp028AqyY+PRfVMtSYMbjuQuu5byyKR01BbqYhuS3jtqQmljZ/bJvXqnmiVXh
                      38UuLa+z077PxyxQhu5BbqntTPQMfiyqEiU+BKbq2WmANUKQf+1AmZY/IruOXbnq
                      L4C1+gJ8vfmXQt99npCaxEjaNRVYfOS8QcixNzHUYnb6emjlANyEVlZzeqo7XKl7
                      UrwV5inawTSzWNvtjEjj4nJL8NsLwscpLPQUhTQ+7BbQXAwAmeHCUTQIvvWXqw0N
                      cmhh4HgeQscQHYgOJjjDVfoY5MucvglbIgCqfzAHW9jxmRL4qbMZj+b1XoePEtht
                      ku4bIQN1X5P07fNWzlgaRL5Z4POXDDZTlIQ/El58j9kp4bnWRCJW0lya+f8ocodo
                      vZZ+Doi+fy4D5ZGrL4XEcIQP/Lv5uFyf+kQtl/94VFYVJOleAv8W92KdgDkhTcTD
                      G7c0tIkVEKNUq48b3aQ64NOZQW7fVjfoKwEZdOqPE72Pa45jrZzvUFxSpdiNk2tZ
                      XYukHjlxxEgBdC/J3cMMNRE1F4NCA3ApfV1Y7/hTeOnmDuDYwr9/obA8t016Yljj
                      q5rdkywPf4JF8mXUW5eCN1vAFHxeg9ZWemhBtQmGxXnw9M+z6hWwc6ahmwARAQAB
                      tCtEb2NrZXIgUmVsZWFzZSAoQ0UgZGViKSA8ZG9ja2VyQGRvY2tlci5jb20+iQI3
                      BBMBCgAhBQJYrefAAhsvBQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEI2BgDwO
                      v82IsskP/iQZo68flDQmNvn8X5XTd6RRaUH33kXYXquT6NkHJciS7E2gTJmqvMqd
                      tI4mNYHCSEYxI5qrcYV5YqX9P6+Ko+vozo4nseUQLPH/ATQ4qL0Zok+1jkag3Lgk
                      jonyUf9bwtWxFp05HC3GMHPhhcUSexCxQLQvnFWXD2sWLKivHp2fT8QbRGeZ+d3m
                      6fqcd5Fu7pxsqm0EUDK5NL+nPIgYhN+auTrhgzhK1CShfGccM/wfRlei9Utz6p9P
                      XRKIlWnXtT4qNGZNTN0tR+NLG/6Bqd8OYBaFAUcue/w1VW6JQ2VGYZHnZu9S8LMc
                      FYBa5Ig9PxwGQOgq6RDKDbV+PqTQT5EFMeR1mrjckk4DQJjbxeMZbiNMG5kGECA8
                      g383P3elhn03WGbEEa4MNc3Z4+7c236QI3xWJfNPdUbXRaAwhy/6rTSFbzwKB0Jm
                      ebwzQfwjQY6f55MiI/RqDCyuPj3r3jyVRkK86pQKBAJwFHyqj9KaKXMZjfVnowLh
                      9svIGfNbGHpucATqREvUHuQbNnqkCx8VVhtYkhDb9fEP2xBu5VvHbR+3nfVhMut5
                      G34Ct5RS7Jt6LIfFdtcn8CaSas/l1HbiGeRgc70X/9aYx/V/CEJv0lIe8gP6uDoW
                      FPIZ7d6vH+Vro6xuWEGiuMaiznap2KhZmpkgfupyFmplh0s6knymuQINBFit2ioB
                      EADneL9S9m4vhU3blaRjVUUyJ7b/qTjcSylvCH5XUE6R2k+ckEZjfAMZPLpO+/tF
                      M2JIJMD4SifKuS3xck9KtZGCufGmcwiLQRzeHF7vJUKrLD5RTkNi23ydvWZgPjtx
                      Q+DTT1Zcn7BrQFY6FgnRoUVIxwtdw1bMY/89rsFgS5wwuMESd3Q2RYgb7EOFOpnu
                      w6da7WakWf4IhnF5nsNYGDVaIHzpiqCl+uTbf1epCjrOlIzkZ3Z3Yk5CM/TiFzPk
                      z2lLz89cpD8U+NtCsfagWWfjd2U3jDapgH+7nQnCEWpROtzaKHG6lA3pXdix5zG8
                      eRc6/0IbUSWvfjKxLLPfNeCS2pCL3IeEI5nothEEYdQH6szpLog79xB9dVnJyKJb
                      VfxXnseoYqVrRz2VVbUI5Blwm6B40E3eGVfUQWiux54DspyVMMk41Mx7QJ3iynIa
                      1N4ZAqVMAEruyXTRTxc9XW0tYhDMA/1GYvz0EmFpm8LzTHA6sFVtPm/ZlNCX6P1X
                      zJwrv7DSQKD6GGlBQUX+OeEJ8tTkkf8QTJSPUdh8P8YxDFS5EOGAvhhpMBYD42kQ
                      pqXjEC+XcycTvGI7impgv9PDY1RCC1zkBjKPa120rNhv/hkVk/YhuGoajoHyy4h7
                      ZQopdcMtpN2dgmhEegny9JCSwxfQmQ0zK0g7m6SHiKMwjwARAQABiQQ+BBgBCAAJ
                      BQJYrdoqAhsCAikJEI2BgDwOv82IwV0gBBkBCAAGBQJYrdoqAAoJEH6gqcPyc/zY
                      1WAP/2wJ+R0gE6qsce3rjaIz58PJmc8goKrir5hnElWhPgbq7cYIsW5qiFyLhkdp
                      YcMmhD9mRiPpQn6Ya2w3e3B8zfIVKipbMBnke/ytZ9M7qHmDCcjoiSmwEXN3wKYI
                      mD9VHONsl/CG1rU9Isw1jtB5g1YxuBA7M/m36XN6x2u+NtNMDB9P56yc4gfsZVES
                      KA9v+yY2/l45L8d/WUkUi0YXomn6hyBGI7JrBLq0CX37GEYP6O9rrKipfz73XfO7
                      JIGzOKZlljb/D9RX/g7nRbCn+3EtH7xnk+TK/50euEKw8SMUg147sJTcpQmv6UzZ
                      cM4JgL0HbHVCojV4C/plELwMddALOFeYQzTif6sMRPf+3DSj8frbInjChC3yOLy0
                      6br92KFom17EIj2CAcoeq7UPhi2oouYBwPxh5ytdehJkoo+sN7RIWua6P2WSmon5
                      U888cSylXC0+ADFdgLX9K2zrDVYUG1vo8CX0vzxFBaHwN6Px26fhIT1/hYUHQR1z
                      VfNDcyQmXqkOnZvvoMfz/Q0s9BhFJ/zU6AgQbIZE/hm1spsfgvtsD1frZfygXJ9f
                      irP+MSAI80xHSf91qSRZOj4Pl3ZJNbq4yYxv0b1pkMqeGdjdCYhLU+LZ4wbQmpCk
                      SVe2prlLureigXtmZfkqevRz7FrIZiu9ky8wnCAPwC7/zmS18rgP/17bOtL4/iIz
                      QhxAAoAMWVrGyJivSkjhSGx1uCojsWfsTAm11P7jsruIL61ZzMUVE2aM3Pmj5G+W
                      9AcZ58Em+1WsVnAXdUR//bMmhyr8wL/G1YO1V3JEJTRdxsSxdYa4deGBBY/Adpsw
                      24jxhOJR+lsJpqIUeb999+R8euDhRHG9eFO7DRu6weatUJ6suupoDTRWtr/4yGqe
                      dKxV3qQhNLSnaAzqW/1nA3iUB4k7kCaKZxhdhDbClf9P37qaRW467BLCVO/coL3y
                      Vm50dwdrNtKpMBh3ZpbB1uJvgi9mXtyBOMJ3v8RZeDzFiG8HdCtg9RvIt/AIFoHR
                      H3S+U79NT6i0KPzLImDfs8T7RlpyuMc4Ufs8ggyg9v3Ae6cN3eQyxcK3w0cbBwsh
                      /nQNfsA6uu+9H7NhbehBMhYnpNZyrHzCmzyXkauwRAqoCbGCNykTRwsur9gS41TQ
                      M8ssD1jFheOJf3hODnkKU+HKjvMROl1DK7zdmLdNzA1cvtZH/nCC9KPj1z8QC47S
                      xx+dTZSx4ONAhwbS/LN3PoKtn8LPjY9NP9uDWI+TWYquS2U+KHDrBDlsgozDbs/O
                      jCxcpDzNmXpWQHEtHU7649OXHP7UeNST1mCUCH5qdank0V1iejF6/CfTFU4MfcrG
                      YT90qFF93M3v01BbxP+EIY2/9tiIPbrd
                      =0YYh
                      -----END PGP PUBLIC KEY BLOCK-----

              users:
                - name: evan
                  shell: /bin/bash
                  ssh_import_id: gh:ebroder
                  sudo: ALL=(ALL) NOPASSWD:ALL
                - name: zarvox
                  shell: /bin/bash
                  ssh_import_id: gh:zarvox
                  sudo: ALL=(ALL) NOPASSWD:ALL

              swap:
                filename: "/swapfile"
                size: 2147483648 # 2GB

              packages:
                - awscli
                - docker-ce
                - docker-ce-cli
                - containerd.io
                - htop
                - moreutils
                - python3-dev
                - python3-pip

              ${PapertrailRsyslogConfig}

              write_files:
                - path: /etc/cron.hourly/docker-cleanup
                  content: |
                    #!/bin/sh
                    docker volume ls -qf dangling=true | chronic xargs -r docker volume rm
                  permissions: "0755"
                - path: /etc/docker/daemon.json
                  content: |
                    {
                      "log-driver": "json-file",
                      "log-opts": {
                        "max-size": "100m"
                      }
                    }
                - path: /etc/nginx/conf.d/default.conf
                  content: |
                    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
                    # scheme used to connect to this server
                    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
                      default $http_x_forwarded_proto;
                      ''      $scheme;
                    }
                    # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
                    # server port the client connected to
                    map $http_x_forwarded_port $proxy_x_forwarded_port {
                      default $http_x_forwarded_port;
                      ''      $server_port;
                    }
                    # Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
                    map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
                      default off;
                      https on;
                    }
                    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
                    # Connection header that may have been passed to this server
                    map $http_upgrade $proxy_connection {
                      default upgrade;
                      '' close;
                    }

                    gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

                    log_format access '[$time_iso8601] $remote_addr - "$request" $status $body_bytes_sent $request_time $upstream_cache_status "$http_referer" "$http_user_agent"';
                    access_log /var/log/nginx/access.log access;

                    # HTTP 1.1 support
                    proxy_http_version 1.1;
                    proxy_buffering on;
                    proxy_set_header Host $http_host;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection $proxy_connection;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
                    proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
                    proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
                    # Mitigate httpoxy attack
                    proxy_set_header Proxy "";
                    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=assets:10m;
                    proxy_cache assets;

                    set_real_ip_from 10.0.0.0/8;
                    real_ip_header X-Forwarded-For;

                    upstream jolly-roger {
                      server 127.0.0.1:3000;
                    }

                    server {
                      server_name ${AppUrl};
                      listen 8443 default_server;

                      add_header Strict-Transport-Security "max-age=31536000";
                      gzip on;
                      gzip_comp_level 9;
                      gzip_proxied any;

                      location /healthcheck {
                        return 200 "OK\n";
                      }

                      location / {
                        proxy_pass http://jolly-roger;
                      }
                    }
                - path: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                  content: |
                    {
                      "metrics": {
                        "append_dimensions": {
                          "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                          "ImageId": "${!aws:ImageId}",
                          "InstanceId": "${!aws:InstanceId}",
                          "InstanceType": "${!aws:InstanceType}"
                        },
                        "metrics_collected": {
                          "cpu": {
                            "measurement": [
                              "cpu_usage_idle",
                              "cpu_usage_iowait",
                              "cpu_usage_user",
                              "cpu_usage_system"
                            ]
                          },
                          "mem": {
                            "measurement": [
                              "mem_used_percent"
                            ]
                          },
                          "diskio": {
                            "measurement": [
                              "io_time",
                              "write_bytes",
                              "read_bytes",
                              "writes",
                              "reads"
                            ]
                          },
                          "netstat": {
                            "measurement": [
                              "tcp_established",
                              "tcp_time_wait"
                            ]
                          },
                          "swap": {
                            "measurement": [
                              "swap_used_percent"
                            ]
                          }
                        }
                      }
                    }

              runcmd:
                - set -eux

                # Whatever happens, let cloudformation know
                - pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
                - cleanup() { ret=$?; set +e; cfn-signal -e $ret -r "runcmds complete" --stack=${AWS::StackName} --region=${AWS::Region} --resource=AppAsg; exit $ret; }
                - trap cleanup EXIT

                # Uninstall Amazon SSM manager and snapd - we don't use them, and they eat memory (and cause swap-thrashing)
                - snap remove amazon-ssm-agent
                - sudo apt-get remove -y snapd

                - pip3 install 'credstash==1.12.0'
                - export AWS_DEFAULT_REGION=${AWS::Region}

                # Observability
                - curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
                - dpkg -i ./amazon-cloudwatch-agent.deb
                - rm amazon-cloudwatch-agent.deb
                - sudo systemctl start amazon-cloudwatch-agent

                ${PapertrailDockerConfig}

                - docker run --name jolly-roger -d --network=host --restart=unless-stopped -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION -e PORT=3000 -e ROOT_URL=https://${AppUrl} ghcr.io/deathandmayhem/jolly-roger
                - docker run --name nginx -d --network=host --restart=unless-stopped -v /etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf nginx
                - docker run --name watchtower -d --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --interval 30 --cleanup
            -
              PapertrailRsyslogConfig: !If
                - HavePapertrail
                - !Sub |
                    rsyslog:
                      remotes:
                        papertrail: ${PapertrailHost}
                - ''
              PapertrailDockerConfig: !If
                - HavePapertrail
                - !Sub '- docker run --name logspout -d --restart=unless-stopped -v /var/run/docker.sock:/tmp/docker.sock -e "SYSLOG_HOSTNAME=$(hostname){{.Container.Name}}" gliderlabs/logspout:master syslog://${PapertrailHost}'
                - ''
    DependsOn:
      - InternetGatewayAttachment

  AppAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 1800
      LaunchConfigurationName: !Ref AppLaunchConfig
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MaxSize: !Ref AppMaxSize
      MinSize: !Ref AppMinSize
      DesiredCapacity: !Ref AppDesiredCapacity
      TargetGroupARNs:
        - !Ref AppAlbTargetHTTPS
      Tags:
        - Key: DNSZone
          Value: !Ref AppDomain
          PropagateAtLaunch: false
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WaitOnResourceSignals: true
        PauseTime: PT30M
        MinSuccessfulInstancesPercent: 100
        MinInstancesInService: 1

  AppDns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref AppDomain
      Name: !Ref AppUrl
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt AppAlb.CanonicalHostedZoneID
        DNSName: !GetAtt AppAlb.DNSName
