@import "theme";

$solved-puzzle-background-color: #dfffdf;
$unsolved-puzzle-background-color: #f0f0f0;
$administrivia-puzzle-background-color: #dfdfff;

// Puzzle components helper styles
// Puzzle lists/tables
.puzzle-group:not(:last-child) {
  margin-bottom: 16px;
}

.puzzle-group-header {
  display: block;
  &:hover {
    cursor: pointer;
  }
  min-height: 32px;
}

.puzzle-list-wrapper {
  padding-left: 1.25em;
}

.puzzle {
  &.unsolved {
    background-color: $unsolved-puzzle-background-color;
  }

  &.solved {
    background-color: $solved-puzzle-background-color;
  }

  &.administrivia {
    background-color: $administrivia-puzzle-background-color;
  }
}

.puzzle-answer > .answer {
  display: block;
  text-indent: -1.2em;
  padding-left: 1.2em;
}

.puzzle.puzzle-grid {
  display: flex;
  flex-direction: row;
  align-items: first baseline;
  justify-content: flex-start;
  line-height: 24px;
  padding: 4px 2px;
  margin-bottom: 4px;

  .puzzle-column {
    padding: 0 2px;
    display: inline-block;
    flex: none;
  }

  .puzzle-title {
    flex: 4;
  }

  .puzzle-link {
    width: 26px;
    text-align: center;
  }

  .puzzle-activity {
    width: 12ch;
    text-align: right;
  }

  .puzzle-answer {
    flex: 3;
    overflow-wrap: break-word;
    overflow: hidden;
  }

  .tag-list {
    flex: 3;
    margin: -2px -4px -2px 0;
  }

  .puzzle-edit-button {
    align-self: flex-start;

    // Resize button to fit in one line-height
    button {
      display: block;
      height: 24px;
      width: 24px;
      padding: 0;
    }
  }

  @include media-breakpoint-down(xs) {
    flex-wrap: wrap;

    /* Push to new row in narrow views */
    .puzzle-answer, .tag-list {
      flex: 0 0 100%;
    }
  }
}

table.puzzle-list {
  width: 100%;
  max-width: 100%;
  border-collapse: separate;
  border-spacing: 0 4px;

  .puzzle.puzzle-table-row {
    td {
      padding: 0px 4px;
      vertical-align: baseline;
    }
  }
}

.answer, #jr-puzzle-guess {
  text-transform: uppercase;
  font-family: $font-family-monospace;
  font-weight: 300;

  .answer-segment + .answer-segment {
    margin-left: .4em;
  }
}

// Tags
.tag-list {
  display: inline;

  .tag-editor {
    display: inline;
    min-width: 200px;
  }
}

.tag, .tag-like {
  display: inline-flex;
  align-items: center;
  line-height: 24px;
  margin: 2px 4px 2px 0;
  padding: 0 6px;
  border-radius: 4px;
  background-color: #ddd;
  color: #000;
  &.tag-administrivia {
    background-color: #ffff77;
  }
  &.tag-meta {
    background-color: #ffd57f;
  }
  &.tag-group {
    background-color: #7fffff;
  }
  &.tag-meta-for {
    background-color: #ffb0b0;
  }
  &.tag-needs {
    background-color: #ff4040;
  }
  &.tag-priority {
    background-color: #aaaaff;
  }
  &.tag-none {
    background-color: transparent;
    color: #808080;
  }
}

.tag-link, .tag-link:active, .tag-link:focus, .tag-link:hover {
  color: #000000;
  text-decoration: none;
}

.tag-popover {
  cursor: default;
  position: relative;

  /* Fill the space between the button and the popover, so the cursor can safely travel there */
  &.tag-popover-open:after {
    content: '';
    display: block;
    position: absolute;
    top: 100%;
    left: 0%;
    width: 100%;
    height: $popover-arrow-height;
    z-index: 2;
  }
}

.tag .btn.tag-remove-button {
  height: 16px;
  width: 16px;
  line-height: 10px;
  font-size: 10px;
  padding: 0;
  margin: 0 0 0 6px;
}

.tag-list-empty-label {
  color: #808080;
  margin-right: 4px;
}

/*Guessing and History Modal */
.guess-history-table td.answer {
  word-break: break-all;
}

////////////
// Puzzle page styles

$puzzle-page-padding: 8px;

.puzzle-page {
  .Pane > .puzzle-content, .Pane > .chat-section {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }

  &.narrow {
    display: flex;
    flex-direction: column;
  }
}

.puzzle-content {
  display: flex;
  flex-direction: column;
}

// Chat
.chat-section {
  flex: 1 1 auto;
  display: flex;
  flex-flow: column;
  overflow: hidden;

  p, ul, blockquote, pre {
    margin-bottom: 0;
  }

  blockquote {
    font-size: 14px;
    margin-left: 10px;
    border-left-color: #aaa;
  }
}

.chat-input-row {
  padding: $puzzle-page-padding;
  //capitalize Max to prefer css max over scss max
  padding-bottom: Max(env(safe-area-inset-bottom, 0px), $puzzle-page-padding);
}

.chatter-section {
  flex: 0;
  background-color: #ebd0e3;
  font-size: 12px;
  line-height: 12px;
  padding: $puzzle-page-padding;

  .av-actions {
    display: flex;
    flex-direction: row;
    margin-bottom: $puzzle-page-padding;

    .btn {
      flex: 1;
      padding-right: 2px;
      padding-left: 2px;
      display: flex;
      align-items: center;
      justify-content: center;

      + .btn {
        margin-left: $puzzle-page-padding;
      }
    }
  }
}

.chatter-subsection {
  margin-top: 4px;

  header {
    margin: 4px 0;
    cursor: pointer;
  }

  .people-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;

    &:not(:empty) {
      margin: -4px -4px 0 0;
    }

    &.collapsed {
      display: none;
    }
  }

  .people-item {
    flex: 0 0 auto;
    width: 40px;
    height: 40px;
    background: white;
    cursor: default;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    margin: 4px 4px 0 0;

    .icon {
      font-size: 12px;
      width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: $danger;
      position: absolute;
      right: 0px;

      &.muted-icon {
        top: 0px;
      }

      &.deafened-icon {
        bottom: 0px;
      }
    }

    .discord-avatar {
      width: 100%;
      height: 100%;
    }

    .initial {
      z-index: 10;
      text-transform: uppercase;
      font-weight: bold;
      font-size: 24px;
      color: black;
      line-height: 24px;
    }

    &.live .initial {
      // white border around initial
      // aids readability if the spectrum graph is high
      text-shadow: -1px  1px 0 white,
                    1px  1px 0 white,
                    1px -1px 0 white,
                   -1px -1px 0 white;
    }
  }
}

.chatter-tooltip {
  // Force chatter tooltip overlay to get larger than the default
  // react-bootstrap stylesheet permits.  We can only apply classes to the root
  // tooltip <div>; the .tooltip-inner className is controlled by
  // react-bootstrap/popper.
  .tooltip-inner {
    max-width: 300px;
  }
}

.chat-history {
  flex: 1 1 auto;
  overflow-y: auto;
}

.chat-message, .chat-placeholder {
  padding: 0px $puzzle-page-padding 2px;
  word-wrap: break-word;
  font-size: 14px;
  &.system-message {
    background-color: #e0e0e0;
  }
}

.chat-timestamp {
  float: right;
  font-style: italic;
  font-size: 12px;
  color: #666666;
}

// Puzzle metadata
.puzzle-metadata {
  flex: none;
  padding: ($puzzle-page-padding - 2px) 8px;
  border-bottom: 1px solid #dadce0;
}

.puzzle-metadata-row {
  display: flex;
  width: 100%;
  font-size: 14px;
  align-items: flex-start;
  align-content: flex-start;
  justify-content: space-between;
}

.puzzle-metadata-action-row {
  align-items: center;
  flex-wrap: nowrap;

  a {
    margin-right: 8px;
  }

  button {
    margin: 2px 0 2px 8px;

    &:first-of-type {
      margin-left: auto;
    }
  }
}

.puzzle-metadata-row .puzzle-metadata-answers, .puzzle-metadata-row .tag-list {
  display: flex;
  flex-grow: 1;
  justify-content: flex-start;
  align-items: flex-start;
  align-content: flex-start;
  flex-wrap: wrap;
}

.puzzle-metadata-row .puzzle-metadata-answers {
  .answer {
    background-color: $solved-puzzle-background-color;
    color: #000000;

    .answer-remove-button {
      color: default;
      margin: 0 -6px 0 2px;
      padding: 0 8px 0 0;
      height: 28px;
    }
  }
}

.puzzle-metadata-row .tag-list {
  .tag-modify-button {
    line-height: 22px;
    padding: 0 6px;
    margin: 2px 0;
    position: relative;
  }

  .tag-editor {
    flex-basis: 100%;
    margin: 2px 0;
  }
}

.puzzle-metadata .puzzle-metadata-external-link-button, .puzzle-metadata .gdrive-button {
  display: inline-block;
  font-weight: bold;
  white-space: nowrap;
}

@media (any-pointer: fine) {
  .tablet-only {
    display: none;
  }
}

.puzzle-document {
  width: 100%;
  height: 100%;
  flex: auto;
  position: relative;

  > .puzzle-document-message {
    display: block;
    width: 100%;
    height: 100%;
    background-color: #ddddff;
  }
}

.puzzle-document > .gdrive-embed {
  /* Workaround for unusual sizing behavior of iframes in iOS Safari */
  /* Width and height need to be specified in px then adjusted by min and max */
  width: 0px;
  height: 0px;
  min-width: 100%;
  max-width: 100%;
  min-height: 100%;
  max-height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  border: 0;
  padding-bottom: env(safe-area-inset-bottom, 0px);
  background-color: #f1f3f4;
}

.popover.related-puzzle-popover {
  max-width: none;
  display: flex;
  flex-direction: column;

  .popover-body {
    overflow: auto;
  }

  // Applying display:flex directly to popover-header leads to incorrect vertical sizing when the
  // popover's height is constrained by the viewport. Use an inner div to avoid this.
  .related-puzzle-popover-header-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .related-puzzle-popover-controls {
    align-self: start;
    margin-left: 8px;
    flex: 0 0 auto;

    > * {
      margin-left: 8px;
    }
  }
}

.SplitPane > .Pane.collapsing:before {
  content: "";
  display: block;
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 0, 0, .2);
  z-index: 2;
}

/* Throw an overlay over iFrames during drag to capture mouse events */
/* Works in Chrome and Safari but not Firefox for some reason*/
.SplitPane.dragging:after {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2002;
}
/* Kludge that makes it work in Firefox.
   Amazingly, the above part actually works for iFrames outside of the SplitPane,
   so we're covered everywhere. */
.SplitPane.dragging:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2003;
}

.SplitPane > .Resizer.horizontal.collapsedAdjacent {
  height: 17px;
  min-height: 17px;
  background-color: #666;
  position: relative;
  &:after {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    position: absolute;
    margin-left: -6px;
    left: 50%;
    top: 2px;
    z-index: 2;
  }
  &.collapsedPrevious:after {
    border-top: 4px solid white;
  }
  &.collapsedNext:after {
    border-bottom: 4px solid white;
  }
}

.SplitPane > .Resizer.vertical.collapsedAdjacent {
  width: 17px;
  min-width: 17px;
  background-color: #666;
  position: relative;
  &:after {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    position: absolute;
    margin-top: -6px;
    top: 50%;
    left: 2px;
    z-index: 2;
  }
  &.collapsedPrevious:after {
    border-left: 4px solid white;
  }
  &.collapsedNext:after {
    border-right: 4px solid white;
  }
}

.SplitPane.disabled > .Resizer {
  display: none;
}

.Resizer {
  background: $gray-600;
  z-index: 1;
  box-sizing: border-box;
  background-clip: padding-box;
  &:hover {
    transition: border 0.8s ease;
  }
}

.Resizer.horizontal {
  height: 11px;
  margin: -5px 0;
  border-top: 5px solid rgba(255, 255, 255, 0);
  border-bottom: 5px solid rgba(255, 255, 255, 0);
  cursor: row-resize;
  width: 100%;
  &:hover {
    border-top: 5px solid rgba(0, 0, 0, 0.1);
    border-bottom: 5px solid rgba(0, 0, 0, 0.1);
  }
}

.Resizer.vertical {
  width: 11px;
  margin: 0 -5px;
  border-left: 5px solid rgba(255, 255, 255, 0);
  border-right: 5px solid rgba(255, 255, 255, 0);
  cursor: col-resize;
  &:hover {
    border-left: 5px solid rgba(0, 0, 0, 0.1);
    border-right: 5px solid rgba(0, 0, 0, 0.1);
  }
}

/* Needed to keep the cursor during the drag
   Not really sure why the Resizer style doesn't work during the drag */
.SplitPane.dragging {
  cursor: move;
  &.horizontal {
    cursor: row-resize;
  }
  &.vertical {
    cursor: col-resize;
  }
}

Resizer.disabled {
  cursor: not-allowed;
  &:hover {
    border-color: transparent;
  }
}
